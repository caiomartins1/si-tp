package pt.ubi.di.connection;

import pt.ubi.di.Model.Validations;
import pt.ubi.di.security.model.*;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigInteger;
import java.net.Socket;
import java.util.Arrays;
import java.util.Objects;

public class Client_Lite {
    private final String ip;
    private final int port;
    private Socket socket;
    private ObjectInputStream inputStream;
    private ObjectOutputStream outputStream;

    /**
     * Constructor to create a new client_lite,
     * responsible to create a new connection private between a server_lite and a client_lite
     * @param ip of the serve_lite
     * @param port of the connection
     */
    public Client_Lite(String ip, int port) {
        this.ip = ip;
        this.port = port;

        try {
            socket = new Socket(ip, port);
            inputStream = new ObjectInputStream(socket.getInputStream());
            outputStream = new ObjectOutputStream(socket.getOutputStream());

            System.out.println("Client created!");
            while (true) {
                System.out.print("Waiting for messages.....\n");
                String option =(String) inputStream.readObject();
                switch (option) {
                    case "dh":
                        byte[] keyDH = SecurityDH.receiveExchange(outputStream,inputStream);
                        System.out.println(">Key generated by Diffie-Hellman:\n" + SecurityUtil.byteArrayToHex(keyDH));
                        break;
                    case "mkp":
                        byte[] keyMP = SecurityMP.receiveExchange(outputStream, inputStream);
                        System.out.println(">Key generated by Merkle Puzzles:\n" + SecurityUtil.byteArrayToHex(keyMP));
                        break;
                    case "sk":
                        byte[] sk = SecurityUtil.participateSessionKeys(outputStream, inputStream);
                        System.out.println(">Session key generated: " + SecurityUtil.byteArrayToHex(sk));
                        break;
                    case "exit":
                        outputStream.close();
                        inputStream.close();
                        socket.close();
                        break;
                    case "rsa":
                        System.out.println("_____________Starting RSA key exchange_____________");

                        //gera as chaves RSA do Cliente
                        SecurityRSA factoryRSA = new SecurityRSA();
                        factoryRSA.calculate_Keys();

                        //escreve e envia a chave p√∫blica
                        SecurityRSA publicKey = new SecurityRSA(factoryRSA.getE(),factoryRSA.getN());
                        outputStream.writeObject(publicKey);

                        //recebe a pk outro Cliente - usa para encriptar mensagens que enviar
                        SecurityRSA factoryRSA_1 = (SecurityRSA)inputStream.readObject();

                        break;
                    default:
                        break;
                }
            }
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}
