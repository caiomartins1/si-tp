package pt.ubi.di.connection;

import pt.ubi.di.Model.Validations;
import pt.ubi.di.security.model.*;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;

public class Client_Lite {
    private final String ip;
    private final int port;
    private Socket socket;
    private ObjectInputStream inputStream;
    private ObjectOutputStream outputStream;
    private byte[] secretKey;


    /**
     * Constructor to create a new client_lite,
     * responsible to create a new connection private between a server_lite and a client_lite
     * @param ip of the serve_lite
     * @param port of the connection
     */
    public Client_Lite(String ip, int port) {
        this.ip = ip;
        this.port = port;

        try {
            socket = new Socket(ip, port);
            inputStream = new ObjectInputStream(socket.getInputStream());
            outputStream = new ObjectOutputStream(socket.getOutputStream());

            System.out.println("Client created!");
            while (true) {
                System.out.print("Waiting for messages.....\n");
                String option =(String) inputStream.readObject();
                switch (option) {
                    case "dh":
                        secretKey = SecurityDH.receiveExchange(outputStream,inputStream);
                        System.out.println(">Key generated by Diffie-Hellman:\n" + SecurityUtil.byteArrayToHex(secretKey));
                        break;
                    case "mkp":
                        secretKey = SecurityMP.receiveExchange(outputStream, inputStream);
                        System.out.println(">Key generated by Merkle Puzzles:\n" + SecurityUtil.byteArrayToHex(secretKey));
                        break;
                    case "sk":
                        secretKey = SecurityUtil.participateSessionKeys(outputStream, inputStream);
                        System.out.println(">Session key generated: " + SecurityUtil.byteArrayToHex(secretKey));
                        break;
                    case "message":
                            communicate();
                        break;
                        case "ck":
                            if(secretKey == null) {
                                System.out.println("No key secret configured.");
                            }
                            else
                                SecurityUtil.checkSharedKey2(outputStream,inputStream,secretKey);
                        break;
                    case "rsa":
                        //demora um pouco
                        System.out.println("_____________Starting RSA key exchange_____________");

                        //gera as chaves RSA do Cliente
                        SecurityRSA factoryRSA = new SecurityRSA();
                        //System.out.println(factoryRSA.getP());
                        factoryRSA.calculate_Keys();
                        System.out.println("My Public Key: "+ factoryRSA.getE() + "\nMy Private Key: " + factoryRSA.getD());

                        //escreve e envia a chave pÃºblica
                        SecurityRSA publicKey = new SecurityRSA(factoryRSA.getE(),factoryRSA.getN());
                        outputStream.writeObject(publicKey);

                        //recebe a pk outro Cliente - usa para encriptar mensagens que enviar
                        SecurityRSA factoryRSA_1 = (SecurityRSA)inputStream.readObject();
                        System.out.println("-------------------------------------------");
                        System.out.println("Public Key do outro User -> " + factoryRSA_1.getE());
                        break;
                    case "exit":
                        outputStream.close();
                        inputStream.close();
                        socket.close();
                        break;
                    default:
                        break;
                }
            }
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    private void communicate() {
        boolean flag = true;
        if(secretKey == null) {
            System.out.println("No secret key configured.");
            return;
        }
        while(true) {
            try {
                flag =(boolean) inputStream.readObject();
                if (!flag)
                    return;
            } catch (Exception e) {
                System.out.println("Error Receiving flag.");;
            }
            String receiveMessage = SecurityUtil.receiveMessage(outputStream,inputStream,secretKey);
            System.out.println(receiveMessage);
            System.out.print("message>");
            String message = Validations.readString();
                try {
                    if (message == null)
                        message = "";
                    else if (message.equals("-exit")) {
                        outputStream.writeObject(false);
                        return;
                    }
                    outputStream.writeObject(true);
                } catch (Exception e) {
                    System.out.println("Error sending flag.");;
                }
            SecurityUtil.sendMessage(outputStream,inputStream,message,secretKey,new String[]{});
        }
    }

}
